# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.streetview.publish_v1.proto import resources_pb2 as google_dot_streetview_dot_publish__v1_dot_proto_dot_resources__pb2
from google.streetview.publish_v1.proto import rpcmessages_pb2 as google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2


class StreetViewPublishServiceStub(object):
  """Definition of the service that backs the Street View Publish API.

  Publishes and connects user-contributed photos on Street View.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StartUpload = channel.unary_unary(
        '/google.streetview.publish.v1.StreetViewPublishService/StartUpload',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_resources__pb2.UploadRef.FromString,
        )
    self.CreatePhoto = channel.unary_unary(
        '/google.streetview.publish.v1.StreetViewPublishService/CreatePhoto',
        request_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.CreatePhotoRequest.SerializeToString,
        response_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_resources__pb2.Photo.FromString,
        )
    self.GetPhoto = channel.unary_unary(
        '/google.streetview.publish.v1.StreetViewPublishService/GetPhoto',
        request_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.GetPhotoRequest.SerializeToString,
        response_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_resources__pb2.Photo.FromString,
        )
    self.BatchGetPhotos = channel.unary_unary(
        '/google.streetview.publish.v1.StreetViewPublishService/BatchGetPhotos',
        request_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchGetPhotosRequest.SerializeToString,
        response_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchGetPhotosResponse.FromString,
        )
    self.ListPhotos = channel.unary_unary(
        '/google.streetview.publish.v1.StreetViewPublishService/ListPhotos',
        request_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.ListPhotosRequest.SerializeToString,
        response_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.ListPhotosResponse.FromString,
        )
    self.UpdatePhoto = channel.unary_unary(
        '/google.streetview.publish.v1.StreetViewPublishService/UpdatePhoto',
        request_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.UpdatePhotoRequest.SerializeToString,
        response_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_resources__pb2.Photo.FromString,
        )
    self.BatchUpdatePhotos = channel.unary_unary(
        '/google.streetview.publish.v1.StreetViewPublishService/BatchUpdatePhotos',
        request_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchUpdatePhotosRequest.SerializeToString,
        response_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchUpdatePhotosResponse.FromString,
        )
    self.DeletePhoto = channel.unary_unary(
        '/google.streetview.publish.v1.StreetViewPublishService/DeletePhoto',
        request_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.DeletePhotoRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.BatchDeletePhotos = channel.unary_unary(
        '/google.streetview.publish.v1.StreetViewPublishService/BatchDeletePhotos',
        request_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchDeletePhotosRequest.SerializeToString,
        response_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchDeletePhotosResponse.FromString,
        )


class StreetViewPublishServiceServicer(object):
  """Definition of the service that backs the Street View Publish API.

  Publishes and connects user-contributed photos on Street View.
  """

  def StartUpload(self, request, context):
    """Creates an upload session to start uploading photo bytes. The method uses
    the upload URL of the returned
    [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
    the [Photo][google.streetview.publish.v1.Photo].

    In addition to the photo requirements shown in
    https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604,
    the photo must meet the following requirements:

    * Photo Sphere XMP metadata must be included in the photo medadata. See
    https://developers.google.com/streetview/spherical-metadata for the
    required fields.
    * The pixel size of the photo must meet the size requirements listed in
    https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604, and
    the photo must be a full 360 horizontally.

    After the upload completes, the method uses
    [UploadRef][google.streetview.publish.v1.UploadRef] with
    [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
    to create the [Photo][google.streetview.publish.v1.Photo] object entry.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreatePhoto(self, request, context):
    """After the client finishes uploading the photo with the returned
    [UploadRef][google.streetview.publish.v1.UploadRef],
    [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
    publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
    Street View on Google Maps.

    Currently, the only way to set heading, pitch, and roll in CreatePhoto is
    through the [Photo Sphere XMP
    metadata](https://developers.google.com/streetview/spherical-metadata) in
    the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
    `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.

    This method returns the following error codes:

    * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
    the request is malformed or if the uploaded photo is not a 360 photo.
    * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
    reference does not exist.
    * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
    if the account has reached the storage limit.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetPhoto(self, request, context):
    """Gets the metadata of the specified
    [Photo][google.streetview.publish.v1.Photo].

    This method returns the following error codes:

    * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
    the requesting user did not create the requested
    [Photo][google.streetview.publish.v1.Photo].
    * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
    [Photo][google.streetview.publish.v1.Photo] does not exist.
    * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
    requested [Photo][google.streetview.publish.v1.Photo] is still being
    indexed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BatchGetPhotos(self, request, context):
    """Gets the metadata of the specified
    [Photo][google.streetview.publish.v1.Photo] batch.

    Note that if
    [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
    fails, either critical fields are missing or there is an authentication
    error. Even if
    [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
    succeeds, individual photos in the batch may have failures.
    These failures are specified in each
    [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
    in
    [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
    See
    [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
    for specific failures that can occur per photo.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListPhotos(self, request, context):
    """Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
    the user.

    <aside class="note"><b>Note:</b> Recently created photos that are still
    being indexed are not returned in the response.</aside>
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdatePhoto(self, request, context):
    """Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
    as pose, place association, connections, etc. Changing the pixels of a
    photo is not supported.

    Only the fields specified in the
    [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
    field are used. If `updateMask` is not present, the update applies to all
    fields.

    This method returns the following error codes:

    * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
    the requesting user did not create the requested photo.
    * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
    the request is malformed.
    * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
    photo does not exist.
    * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
    requested [Photo][google.streetview.publish.v1.Photo] is still being
    indexed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BatchUpdatePhotos(self, request, context):
    """Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
    as pose, place association, connections, etc. Changing the pixels of photos
    is not supported.

    Note that if
    [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
    fails, either critical fields are missing or there is an authentication
    error. Even if
    [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
    succeeds, individual photos in the batch may have failures.
    These failures are specified in each
    [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
    in
    [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
    See
    [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
    for specific failures that can occur per photo.

    Only the fields specified in
    [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
    field are used. If `updateMask` is not present, the update applies to all
    fields.

    The number of
    [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
    messages in a
    [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
    must not exceed 20.

    <aside class="note"><b>Note:</b> To update
    [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
    [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
    filled as well. Otherwise, the request will fail.</aside>
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeletePhoto(self, request, context):
    """Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.

    This method returns the following error codes:

    * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
    the requesting user did not create the requested photo.
    * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
    does not exist.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BatchDeletePhotos(self, request, context):
    """Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
    metadata.

    Note that if
    [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
    fails, either critical fields are missing or there was an authentication
    error. Even if
    [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
    succeeds, individual photos in the batch may have failures.
    These failures are specified in each
    [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
    in
    [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
    See
    [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
    for specific failures that can occur per photo.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StreetViewPublishServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StartUpload': grpc.unary_unary_rpc_method_handler(
          servicer.StartUpload,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_resources__pb2.UploadRef.SerializeToString,
      ),
      'CreatePhoto': grpc.unary_unary_rpc_method_handler(
          servicer.CreatePhoto,
          request_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.CreatePhotoRequest.FromString,
          response_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_resources__pb2.Photo.SerializeToString,
      ),
      'GetPhoto': grpc.unary_unary_rpc_method_handler(
          servicer.GetPhoto,
          request_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.GetPhotoRequest.FromString,
          response_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_resources__pb2.Photo.SerializeToString,
      ),
      'BatchGetPhotos': grpc.unary_unary_rpc_method_handler(
          servicer.BatchGetPhotos,
          request_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchGetPhotosRequest.FromString,
          response_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchGetPhotosResponse.SerializeToString,
      ),
      'ListPhotos': grpc.unary_unary_rpc_method_handler(
          servicer.ListPhotos,
          request_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.ListPhotosRequest.FromString,
          response_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.ListPhotosResponse.SerializeToString,
      ),
      'UpdatePhoto': grpc.unary_unary_rpc_method_handler(
          servicer.UpdatePhoto,
          request_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.UpdatePhotoRequest.FromString,
          response_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_resources__pb2.Photo.SerializeToString,
      ),
      'BatchUpdatePhotos': grpc.unary_unary_rpc_method_handler(
          servicer.BatchUpdatePhotos,
          request_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchUpdatePhotosRequest.FromString,
          response_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchUpdatePhotosResponse.SerializeToString,
      ),
      'DeletePhoto': grpc.unary_unary_rpc_method_handler(
          servicer.DeletePhoto,
          request_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.DeletePhotoRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'BatchDeletePhotos': grpc.unary_unary_rpc_method_handler(
          servicer.BatchDeletePhotos,
          request_deserializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchDeletePhotosRequest.FromString,
          response_serializer=google_dot_streetview_dot_publish__v1_dot_proto_dot_rpcmessages__pb2.BatchDeletePhotosResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'google.streetview.publish.v1.StreetViewPublishService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
